// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_parallel_simes
Rcpp::List compute_parallel_simes(Rcpp::List pvals, Rcpp::RObject weights, bool log);
RcppExport SEXP _metapod_compute_parallel_simes(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_simes(pvals, weights, log));
    return rcpp_result_gen;
END_RCPP
}
// compute_parallel_berger
Rcpp::List compute_parallel_berger(Rcpp::List pvals, Rcpp::RObject weights, bool log);
RcppExport SEXP _metapod_compute_parallel_berger(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_berger(pvals, weights, log));
    return rcpp_result_gen;
END_RCPP
}
// compute_parallel_wilkinson
Rcpp::List compute_parallel_wilkinson(Rcpp::List pvals, Rcpp::RObject weights, bool log, int min_n, double min_prop);
RcppExport SEXP _metapod_compute_parallel_wilkinson(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP, SEXP min_nSEXP, SEXP min_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< int >::type min_n(min_nSEXP);
    Rcpp::traits::input_parameter< double >::type min_prop(min_propSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_wilkinson(pvals, weights, log, min_n, min_prop));
    return rcpp_result_gen;
END_RCPP
}
// compute_parallel_holm_min
Rcpp::List compute_parallel_holm_min(Rcpp::List pvals, Rcpp::RObject weights, bool log, int min_n, double min_prop);
RcppExport SEXP _metapod_compute_parallel_holm_min(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP, SEXP min_nSEXP, SEXP min_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< int >::type min_n(min_nSEXP);
    Rcpp::traits::input_parameter< double >::type min_prop(min_propSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_holm_min(pvals, weights, log, min_n, min_prop));
    return rcpp_result_gen;
END_RCPP
}
// compute_parallel_stouffer
Rcpp::List compute_parallel_stouffer(Rcpp::List pvals, Rcpp::RObject weights, bool log);
RcppExport SEXP _metapod_compute_parallel_stouffer(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_stouffer(pvals, weights, log));
    return rcpp_result_gen;
END_RCPP
}
// compute_parallel_fisher
Rcpp::List compute_parallel_fisher(Rcpp::List pvals, Rcpp::RObject weights, bool log);
RcppExport SEXP _metapod_compute_parallel_fisher(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_fisher(pvals, weights, log));
    return rcpp_result_gen;
END_RCPP
}
// compute_parallel_pearson
Rcpp::List compute_parallel_pearson(Rcpp::List pvals, Rcpp::RObject weights, bool log);
RcppExport SEXP _metapod_compute_parallel_pearson(SEXP pvalsSEXP, SEXP weightsSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pvals(pvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parallel_pearson(pvals, weights, log));
    return rcpp_result_gen;
END_RCPP
}
// combine_simes
Rcpp::NumericVector combine_simes(Rcpp::List Pvals, bool logp);
RcppExport SEXP _metapod_combine_simes(SEXP PvalsSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Pvals(PvalsSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(combine_simes(Pvals, logp));
    return rcpp_result_gen;
END_RCPP
}
// combine_holm_middle
Rcpp::NumericVector combine_holm_middle(Rcpp::List Pvals, bool logp, double prop);
RcppExport SEXP _metapod_combine_holm_middle(SEXP PvalsSEXP, SEXP logpSEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Pvals(PvalsSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(combine_holm_middle(Pvals, logp, prop));
    return rcpp_result_gen;
END_RCPP
}
// compute_Top_statistic_from_ranks
Rcpp::IntegerVector compute_Top_statistic_from_ranks(Rcpp::List Ranks, double prop);
RcppExport SEXP _metapod_compute_Top_statistic_from_ranks(SEXP RanksSEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Ranks(RanksSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Top_statistic_from_ranks(Ranks, prop));
    return rcpp_result_gen;
END_RCPP
}
// choose_middle_effect_size
Rcpp::NumericVector choose_middle_effect_size(Rcpp::List Pvals, Rcpp::List Effects, double prop);
RcppExport SEXP _metapod_choose_middle_effect_size(SEXP PvalsSEXP, SEXP EffectsSEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Pvals(PvalsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Effects(EffectsSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_middle_effect_size(Pvals, Effects, prop));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_metapod_compute_parallel_simes", (DL_FUNC) &_metapod_compute_parallel_simes, 3},
    {"_metapod_compute_parallel_berger", (DL_FUNC) &_metapod_compute_parallel_berger, 3},
    {"_metapod_compute_parallel_wilkinson", (DL_FUNC) &_metapod_compute_parallel_wilkinson, 5},
    {"_metapod_compute_parallel_holm_min", (DL_FUNC) &_metapod_compute_parallel_holm_min, 5},
    {"_metapod_compute_parallel_stouffer", (DL_FUNC) &_metapod_compute_parallel_stouffer, 3},
    {"_metapod_compute_parallel_fisher", (DL_FUNC) &_metapod_compute_parallel_fisher, 3},
    {"_metapod_compute_parallel_pearson", (DL_FUNC) &_metapod_compute_parallel_pearson, 3},
    {"_metapod_combine_simes", (DL_FUNC) &_metapod_combine_simes, 2},
    {"_metapod_combine_holm_middle", (DL_FUNC) &_metapod_combine_holm_middle, 3},
    {"_metapod_compute_Top_statistic_from_ranks", (DL_FUNC) &_metapod_compute_Top_statistic_from_ranks, 2},
    {"_metapod_choose_middle_effect_size", (DL_FUNC) &_metapod_choose_middle_effect_size, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_metapod(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
